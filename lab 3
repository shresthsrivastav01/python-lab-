# check disarium number

n=input("enter number")
s=0
for i in range(len(n)):
    s+=int(n[i])**(i+1)
print(s)


# harshad number

n=input("enter number")
s=0
for i in range(len(n)):
    s+=int(n[i])
if(int(n)%s==0):
    print("harshad number")
else:
    print("not harshad number")    


# check if a number is an Armstrong number

def is_armstrong(number):

    digits = str(number)
    num_digits = len(digits)
    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)
    return sum_of_powers == number

for num in range(1, 1001):
    if is_armstrong(num):
        print(num)


# calculate x raised to the power of n
def power(x, n):
    result = 1
    for _ in range(abs(n)):
        result *= x
    if n < 0:
        return 1 / result
    return result

x = float(input("Enter the base (x): "))
n = int(input("Enter the exponent (n): "))

print(f"{x} raised to the power of {n} is: {power(x, n)}"


# find ncr

def factorial(x):
    if x == 0 or x == 1:
        return 1
    result = 1
    for i in range(2, x + 1):
        result *= i
    return result

def nCr(n, r):
    if r > n:
        return "r cannot be greater than n"
    return factorial(n) // (factorial(r) * factorial(n - r))

n = int(input("Enter n (total number of items): "))
r = int(input("Enter r (number of items to choose): "))

print(f"nCr ({n} choose {r}) is: {nCr(n, r)}")


# calculate sum of digits
def sum_of_digits(number):
    total = 0

    for digit in str(abs(number)): 
        total += int(digit)
    return total

number = int(input("Enter a number: "))
print(f"The sum of digits in {number} is: {sum_of_digits(number)}")

















